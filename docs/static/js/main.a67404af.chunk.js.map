{"version":3,"sources":["image/fleshmonk.png","components/List_Words.jsx","components/App_Main.jsx","components/App_Header.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","List_Words","props","letterContainer","letter","list","wordList","addWord","className","map","word","index","toLowerCase","onClick","bind","letters","value","React","Component","App_Main","generate","console","log","req_input","document","getElementById","state","error","isLoaded","clips","fetch","then","res","json","result","setState","this","href","style","id","type","placeholder","src","fleshmonk","App_Header","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,uC,2NCoD5BC,G,kBA/Cd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAsBPC,gBAAkB,SAACC,GAClB,IAAMC,EAAO,EAAKH,MAAMI,SAClBC,EAAU,EAAKL,MAAMK,QAC3B,OAAW,MAARF,EAED,yBAAKG,UAAU,mBACd,4BAAKJ,GACL,4BAEEC,EAAKI,KAAI,SAACC,EAAMC,GAEf,GADYD,EAAK,GAAGE,eACRR,EACT,OAAQ,4BAAI,4BAAQS,QAASN,EAAQO,KAAR,eAAmBJ,IAAQA,cAQhE,GA3CiB,E,sEAIV,IAAD,OAEDK,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE9I,OACC,yBAAKP,UAAU,YACd,+CAEA,yBAAKA,UAAU,QAEbO,EAAQN,KAAI,SAACO,EAAOL,GACnB,OAAO,EAAKR,gBAAgBa,EAAOD,Y,GAjBjBE,IAAMC,YCiFhBC,E,YA5Ed,WAAYjB,GAAQ,IAAD,8BAClB,4CAAMA,KAiEPkB,SAAW,aAlEQ,EAsEnBb,QAAU,SAACG,GACVW,QAAQC,IAAI,OAASZ,GACrB,IAAIa,EAAYC,SAASC,eAAe,aACxCF,EAAUP,MAAQO,EAAUP,MAAQ,IAAMN,GAvE1C,EAAKgB,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,IALS,E,iFASI,IAAD,OACrBC,MAAM,sCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACF,SAACG,GACC,EAAKC,SAAS,CACfP,UAAU,EACVC,MAAOK,OAGR,SAACP,GACC,EAAKQ,SAAS,CACfP,UAAU,EACVD,e,+BAMM,IAAD,EAE4BS,KAAKV,MAAhCC,EAFD,EAECA,MAAiBE,GAFlB,EAEQD,SAFR,EAEkBC,OAEzB,OACC,0BAAMrB,UAAU,IACf,uBAAGA,UAAU,QAAb,2DACyD,uBAAG6B,KAAK,4CAAR,aADzD,6FAKU,MAATV,EACE,yBAAKnB,UAAU,YAAf,wCAEA,8BAGH,uBAAG8B,MAAO,CAAC,MAAS,WAIpB,yBAAKC,GAAG,iBACP,2BAAOA,GAAG,YAAYC,KAAK,OAAOC,YAAY,sBAG/C,4BAAQF,GAAG,eAAe1B,QAASuB,KAAKhB,UAAxC,YAIA,yBAAKmB,GAAG,uBACP,yBAAKA,GAAG,iBAAiBG,IAAKC,OAG/B,kBAAC,EAAD,CAAYrC,SAAYuB,EAAOtB,QAAS6B,KAAK7B,e,GA/D1BU,IAAMC,WCSd0B,E,iLAPb,OACC,gCACC,0D,GALqB3B,IAAMC,WCahB2B,E,iLARb,OACC,yBAAKrC,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANcS,IAAMC,WCKJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAASC,eAAe,SD2H3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.a67404af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fleshmonk.bdd75fa5.png\";","import React from 'react';\r\nimport '../scss/wordList.scss';\r\n\r\nclass List_Words extends React.Component  {\r\n\t\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\t\r\n\t}\r\n\t\r\n\trender(){\r\n\t\t\r\n\t\tconst letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"wordList\">\r\n\t\t\t\t<h2>available words</h2>\r\n\t\t\t\t\r\n\t\t\t\t<div className=\"flex\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tletters.map((value, index) => {\r\n\t\t\t\t\t\t\treturn this.letterContainer(value, letters);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n\tletterContainer = (letter) =>{\t\t\r\n\t\tconst list = this.props.wordList;\r\n\t\tconst addWord = this.props.addWord;\r\n\t\tif(list != null){\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"letterContainer\">\r\n\t\t\t\t\t<h3>{letter}</h3>\t\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlist.map((word, index) =>{\r\n\t\t\t\t\t\t\t\tlet start = word[0].toLowerCase();\r\n\t\t\t\t\t\t\t\tif(start == letter){\r\n\t\t\t\t\t\t\t\t   return (<li><button onClick={addWord.bind(this, word)}>{word}</button></li>)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\nexport default List_Words;","import React from 'react';\r\nimport '../scss/App.scss';\r\nimport fleshmonk from '../image/fleshmonk.png';\r\nimport List_Words from './List_Words.jsx';\r\nvar state = {}\r\n\r\nclass App_Main extends React.Component {\r\n  \r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t  error: null,\r\n\t\t  isLoaded: false,\r\n\t\t  clips: []\r\n\t\t};\r\n\t}\r\n\t\r\n\t  componentDidMount() {\r\n\t\tfetch(\"https://localhost:44313/SoundBoard\")\r\n\t\t  .then(res => res.json())\r\n\t\t  .then(\r\n\t\t\t(result) => {\r\n\t\t\t  this.setState({\r\n\t\t\t\tisLoaded: true,\r\n\t\t\t\tclips: result\r\n\t\t\t  });\t\t\t\t\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t  this.setState({\r\n\t\t\t\tisLoaded: true,\r\n\t\t\t\terror\r\n\t\t\t  });\r\n\t\t\t}\r\n\t\t  )\r\n\t  }\r\n\t\r\n\trender(){\r\n\t\t\r\n\t\tconst { error, isLoaded, clips } = this.state;\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<main className=\"\">\r\n\t\t\t\t<p className=\"desc\">\r\n\t\t\t\t\tFleshmonk Sound Board. Compile sounds from the YouTuber <a href=\"https://www.youtube.com/user/MrWilkins88\">Fleshmonk</a> and generate your own voice clips! In the future maybe support for auto generated voice.\r\n\t\t\t\t</p>\r\n\t\t\t\t\r\n\t\t\t\t{\r\n\t\t\t\t\terror != null ? \r\n\t\t\t\t\t\t(<div className=\"ErrorMsg\">Error -- Could not connect to server</div>)\r\n\t\t\t\t\t:\r\n\t\t\t\t\t\t(<div></div>)\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t<p style={{\"color\": \"white\"}}>\r\n\r\n\t\t\t\t</p>\r\n\t\t\t\t\r\n\t\t\t\t<div id=\"req_container\">\r\n\t\t\t\t\t<input id=\"req_input\" type=\"text\" placeholder=\"I'm Fleshmonk...\"/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<button id=\"req_generate\" onClick={this.generate}>\r\n\t\t\t\t\tgenerate\r\n\t\t\t\t</button>\r\n\t\t\t\t\r\n\t\t\t\t<div id=\"fleshmonk_container\">\r\n\t\t\t\t\t<img id=\"fleshmonk_logo\" src={fleshmonk} />\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<List_Words wordList = {clips} addWord={this.addWord}></List_Words>\r\n\t\t\t</main>\r\n\t\t);\r\n\t}\r\n\t\r\n\tgenerate = () =>{\r\n\t\treturn;\r\n\t}\r\n\t\r\n\taddWord = (word) =>{\r\n\t\tconsole.log(\"add \" + word);\r\n\t\tlet req_input = document.getElementById(\"req_input\");\r\n\t\treq_input.value = req_input.value + \" \" + word;\r\n\t}\r\n}\r\nexport default App_Main;\r\n","import React from 'react';\r\nimport '../scss/App.scss';\r\n\r\nvar state = {}\r\n\r\nclass App_Header extends React.Component {\r\n  \r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<header>\r\n\t\t\t\t<h1>fleshmonk sound board</h1>\r\n\t\t\t</header>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App_Header;\r\n","import React from 'react';\nimport '../scss/App.scss';\nimport App_Main from './App_Main.jsx';\nimport App_Header from './App_Header.jsx';\n\nvar state = {}\n\nclass App extends React.Component {\n  \n\trender(){\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<App_Header/>\n\t\t\t\t<App_Main/>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}